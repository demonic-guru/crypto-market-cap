<?php

namespace AppBundle\Repository;

use Doctrine\Common\Collections\Criteria;


/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends \Doctrine\ORM\EntityRepository
{
    public function bulkUpdateItems($itemId, $name, $description, $description_html, $site,
	    $price, $numberOfSales, $auhtor, $authorImage, $url, $summary, $rating, $published, $featuredUser, $landscapeUrl, $liveSiteUrl,
	    $iconUrl, $videoUrl, $videoIconUrl, $videoLandscapeUrl, $audioIconUrl, $audioMP3Url, $audioMP3Id, $audioLengthhours, $audioLengthMinutes, $audioLengthSecs, $threedIconUrl,
	    $threedSquareUrl)
    {
        return $this->createQueryBuilder('item')
	        ->update('AppBundle:Item', 'i')
	        ->set('i.name', ':name')
	        ->set('i.description', ':desc')
	        ->set('i.description_html', ':desc_html')
	        ->set('i.site', ':site')
	        ->set('i.price', ':price')
	        ->set('i.numberOfSales', ':numberOfSales')
	        ->set('i.auhtor', ':auhtor')
	        ->set('i.authorImage', ':authorImage')
	        ->set('i.url', ':url')
	        ->set('i.summary', ':summary')
	        ->set('i.rating', ':rating')
	        ->set('i.published', ':published')
	        ->set('i.featuredUser', ':featuredUser')
	        ->set('i.landscapeUrl', ':landscapeUrl')
	        ->set('i.liveSiteUrl', ':liveSiteUrl')
	        ->set('i.icon_url', ':iconUrl')
	        ->set('i.video_url', ':videoUrl')
	        ->set('i.video_icon_url', ':videoIconUrl')
	        ->set('i.video_landscape_url', ':videoLandscapeUrl')
	        ->set('i.audio_icon_url', ':audioIconUrl')
	        ->set('i.audio_mp3_url', ':audioMP3Url')
	        ->set('i.audio_mp3_id', ':audioMP3Id')
	        ->set('i.audio_length_hours', ':audioLengthhours')
	        ->set('i.audio_length_minutes', ':audioLengthMinutes')
	        ->set('i.audio_length_secs', ':audioLengthSecs')
	        ->set('i.threed_icon_url', ':threedIconUrl')
	        ->set('i.threed_square_url', ':threedSquareUrl')

	        ->where('i.itemId = :itemId')
	        ->setParameter('itemId', $itemId)

	        ->setParameter('name', $name)
            ->setParameter('desc', $description)
	        ->setParameter('desc_html', $description_html)
	        ->setParameter('site', $site)
	        ->setParameter('price', $price)
	        ->setParameter('numberOfSales', $numberOfSales)
	        ->setParameter('auhtor', $auhtor)
	        ->setParameter('authorImage', $authorImage)
	        ->setParameter('url', $url)
	        ->setParameter('summary', $summary)
	        ->setParameter('rating', $rating)
	        ->setParameter('published', $published)
	        ->setParameter('featuredUser', $featuredUser)
	        ->setParameter('landscapeUrl', $landscapeUrl)
	        ->setParameter('liveSiteUrl', $liveSiteUrl)
	        ->setParameter('iconUrl', $iconUrl)
	        ->setParameter('videoUrl', $videoUrl)
	        ->setParameter('videoIconUrl', $videoIconUrl)
	        ->setParameter('videoLandscapeUrl', $videoLandscapeUrl)
	        ->setParameter('audioIconUrl', $audioIconUrl)
	        ->setParameter('audioMP3Url', $audioMP3Url)
	        ->setParameter('audioMP3Id', $audioMP3Id)
	        ->setParameter('audioLengthhours', $audioLengthhours)
	        ->setParameter('audioLengthMinutes', $audioLengthMinutes)
	        ->setParameter('audioLengthSecs', $audioLengthSecs)
	        ->setParameter('threedIconUrl', $threedIconUrl)
	        ->setParameter('threedSquareUrl', $threedSquareUrl)

            ->getQuery()
            ->execute();

    }

	public function getCodeCanyonCategoryItems($MaxResults, $active)
	{
		return $this->createQueryBuilder('item')
		            ->andWhere('item.active = :active' )
		            ->orderBy('item.publishedAt', 'desc')
		            ->setParameter('active', $active)
			// ->setParameter('slug', $user_slug)
			        ->leftJoin('item.codecanyonCategory', 'category')
		            ->addSelect('category')
		            ->setMaxResults($MaxResults)
		            ->getQuery()
		            ->execute();
	}


    public function getCodeCanyonCategoryPaginated($slug, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
	        ->orderBy('item.published', 'DESC')
            ->setParameter('active', 1)
            ->setParameter('slug', $slug)
            ->leftJoin('item.codecanyonCategory', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')

            ->getQuery()
            ->execute();
    }

    public function getThemeforestCategoryPaginated($slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.themeforestCategory', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getVideoHiveCategoryPaginated($slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.videohiveCategory', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getAudioJungleCategoryPaginated($slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.audiojungleCategory', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getGraphicRiverCategoryPaginated($slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.graphicriverCategory', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getThreeCategoryPaginated($slug, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.threedoceanCategory', 'category')
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getCodeCanyonCategoryTotalItems($slug)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', 1)
            ->setParameter('slug', $slug)
            ->leftJoin('item.codecanyonCategory', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getThemeforestCategoryTotalItems($slug, $status)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.themeforestCategory', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getVideoHiveCategoryTotalItems($slug, $status)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.videohiveCategory', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getAudioJungleCategoryTotalItems($slug, $status)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.audiojungleCategory', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getGraphicRiverCategoryTotalItems($slug, $status)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.graphicriverCategory', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }

    public function getThreeCategoryTotalItems($slug, $status)
    {
        return $this->createQueryBuilder('item')
            ->andwhere('category.slug = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', $status)
            ->setParameter('slug', $slug)
            ->leftJoin('item.threedoceanCategory', 'category')
            ->addSelect('category')
            ->getQuery()
            ->execute();
    }


    public function searchItemsTotal($search)
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.description LIKE :searchTerm OR item.auhtor LIKE :searchTerm OR item.name LIKE :searchTerm' )
            ->orderBy('item.published', 'desc')
            ->setParameter('searchTerm','%'. $search.'%')
            ->getQuery()
            ->execute();
    }

    public function getSearchItemPaginated($search, $status, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.description LIKE :searchTerm OR item.auhtor LIKE :searchTerm OR item.name LIKE :searchTerm' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('searchTerm','%'. $search.'%')
            ->andWhere('item.active = :active' )
            ->setParameter('active', $status)
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->getQuery()
            ->execute();
    }

    public function searchItemsArrayTotal($search)
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.description LIKE :searchTerm OR item.auhtor LIKE :searchTerm OR item.name LIKE :searchTerm' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('searchTerm','%'. $search.'%')
            ->getQuery()
            ->getArrayResult();
    }

    public function getThreeFeaturedUserItems()
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.active = :active' )
            ->andWhere('item.featuredUser = :featured' )
            ->orderBy('item.publishedAt', 'desc')
            ->setParameter('active', 1)
            ->setParameter('featured', 1)
            ->setMaxResults(6)
            ->getQuery()
            ->execute();
    }

    public function getAuthorTotalItems($slug)
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.auhtor = :slug')
            ->andWhere('item.active = :active' )
            ->orderBy('item.published', 'desc')
            ->setParameter('active', 1)
            ->setParameter('slug', $slug)
            ->getQuery()
            ->execute();
    }

    public function getAuthorItemsPaginated($slug, $offset ,$maxResults)
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.auhtor = :slug')
            ->andWhere('item.active = :active' )
            ->setParameter('active', 1)
            ->orderBy('item.published', 'desc')
            ->setParameter('slug', $slug)
            ->setFirstResult($offset)
            ->setMaxResults($maxResults)
            ->getQuery()
            ->execute();
    }

    public function getMarketplaceTotalItems($marketplace)
    {
        return $this->createQueryBuilder('item')
            ->andWhere('item.site = :market')
            ->andWhere('item.active = :active' )
            ->setParameter('active', 1)
            ->setParameter('market', $marketplace)
            ->getQuery()
            ->execute();
    }


    private function findAllCategoryCriteria($slug)
    {
        return Criteria::create()
            ->andWhere(Criteria::expr()->eq('featuredUser', 1))
           // ->andWhere(Criteria::expr()->eq('slug', $slug))
            ->orderBy(['published' => 'DESC']);
    }



}
